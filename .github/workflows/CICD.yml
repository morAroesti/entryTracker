name: entryTracker
env:
  IAM_ROLE_NAME: Role_EC2_allow_ecr
  
on:
  push:
    branches: [ "main" ]
    
jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 2
  #   steps:
  #   - name: Checkout App
  #     uses: actions/checkout@v2
      
  #   - name: Build the App
  #     run: docker build -t entry_tracker:${{ github.run_number }} .
      
  #   - name: Run Docker container
  #     run: docker run --name=entry_trackerb -p "5000:5000" -d entry_tracker:${{ github.run_number }}
      
  #   - name: Wait 
  #     run: sleep 5
      
  #   - name: CURL application
  #     run: curl http://localhost:5000 
  
  #   - name: test status code curl
  #     run: |
  #         response_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000)
  #         if [ $response_code -eq 200 ]; then
  #         echo "Service is up and running (Status code: $response_code)"
  #         exit 0
  #         else
  #         echo "Service check failed (Status code: $response_code)"
  #         exit 1
  #         fi
          
  # package-and-E2E:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 2
  #   steps:  
  #   - name: Checkout App
  #     uses: actions/checkout@v2
      
  #   - name: Package and run the whole application
  #     run: docker compose up -d
    
  #   - name: Wait for services to be ready
  #     run: sleep 15
    
  #   - name: E2E Testing
  #     run: curl http://localhost:5000 
   
  # publish:
  #   needs: package-and-E2E
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 2
  #   steps:  
  #   - name: Checkout App
  #     uses: actions/checkout@v2
      
  #   - name: build
  #     run: docker build -t entry_tracker:${{ github.run_number }} .
 
  #   - name: Configure AWS credentials
  #     run: aws configure set aws_access_key_id ${{ secrets.AWS_ID }} && aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET }} && aws configure set region ap-south-1

  #   - name: Authenticate Docker to AWS ECR
  #     run: aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 779846827025.dkr.ecr.ap-south-1.amazonaws.com

  #   - name: Tag Docker Image
  #     run: docker tag entry_tracker:${{ github.run_number }} 779846827025.dkr.ecr.ap-south-1.amazonaws.com/dev/entry_tracker:${{ github.run_number }}
      
  #   - name: Push Docker to ECR
  #     run: docker push 779846827025.dkr.ecr.ap-south-1.amazonaws.com/dev/entry_tracker:${{ github.run_number }}
  
  Continuous_deployment:
    # needs: publish
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Checkout App
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: ap-south-1

    - name: Make scripts executable
      run: |
        sed -i 's/\r$//' scripts/run-instances.sh
        sed -i 's/\r$//' scripts/user-data.sh
        chmod +x scripts/run-instances.sh
    
    - name: Launch EC2 and wait
      run: bash scripts/run-instances.sh -u scripts/user-data.sh
      
    - name: Attach IAM Role to EC2
      run: |
        aws ec2 associate-iam-instance-profile \
          --instance-id ${{ env.INSTANCE_ID }} \
          --iam-instance-profile Name=${{ env.IAM_ROLE_NAME }}
          
    - name: Install SSH key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.EC2_PRI_KEY }}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
        
    - name: Adding Known Hosts
      run: ssh-keyscan -H ${{ env.PUBLIC_IP }} >> ~/.ssh/known_hosts
          
    - name: Deploy with SSH
      run: |
        ssh ubuntu@${{ env.PUBLIC_IP }} '
            cd /workspace/entryTracker && \
            docker compose up -d
        '
